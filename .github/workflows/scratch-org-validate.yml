name: Validate in Scratch Org

on:
    pull_request:
      types: [opened, synchronize, reopened]
    repository_dispatch:
      types: [validate-pr]

jobs:
    validate:
      runs-on: ubuntu-latest
      env:
          DEVHUB_AUTH_URL: ${{ secrets.DEVHUB_AUTH_URL }}

      steps:
        - uses: actions/checkout@v3
          with:
            ref: ${{ github.event.pull_request.head.ref || github.ref }}

        - name: Install Salesforce CLI
          run: |
            npm install -g @salesforce/cli
            sf version

        - name: Create project-scratch-def.json if missing
          run: |
            if [ ! -f config/project-scratch-def.json ]; then
              mkdir -p config
              cat > config/project-scratch-def.json << 'EOF'
            {
              "orgName": "AI Generated Scratch Org",
              "edition": "Developer",
              "features": ["EnableSetPasswordInApi"],
              "settings": {
                "lightningExperienceSettings": {
                  "enableS1DesktopEnabled": true
                }
              }
            }
            EOF
            fi

        - name: Create sfdx-project.json if missing
          run: |
            if [ ! -f sfdx-project.json ]; then
              cat > sfdx-project.json << 'EOF'
            {
              "packageDirectories": [
                {
                  "path": "force-app",
                  "default": true
                }
              ],
              "sfdcLoginUrl": "https://login.salesforce.com",
              "sourceApiVersion": "59.0"
            }
            EOF
            fi

        - name: Authenticate Dev Hub (if secret exists)
          if: env.DEVHUB_AUTH_URL != ''
          run: |
            echo "${{ secrets.DEVHUB_AUTH_URL }}" > auth-url.txt
            sf org login sfdx-url -f auth-url.txt -a devhub -d
            rm auth-url.txt


        - name: Create Scratch Org (if authenticated)
          id: create-org
          if: env.DEVHUB_AUTH_URL != ''
          continue-on-error: true
          run: |
            if sf org create scratch -f config/project-scratch-def.json -a scratch-org -d -y 1 -w 10; then
              echo "org_created=true" >> $GITHUB_OUTPUT
            else
              echo "org_created=false" >> $GITHUB_OUTPUT
              echo "Scratch org creation failed"
            fi

        - name: Deploy to Scratch Org
          if: steps.create-org.outputs.org_created == 'true'
          id: deploy
          run: |
            echo "Starting deployment to scratch org..."
            
            # Use JSON output for structured error reporting
            if sf project deploy start -o scratch-org -w 20 --json > deploy-output.json 2>&1; then
              echo "deploy_success=true" >> $GITHUB_OUTPUT
              echo "Deployment succeeded!"
            else
              echo "deploy_success=false" >> $GITHUB_OUTPUT
              echo "Deployment failed"
              
              # Display the output for debugging
              echo "=== DEPLOYMENT ERROR OUTPUT ==="
              cat deploy-output.json
              echo "=== END DEPLOYMENT ERROR OUTPUT ==="
              
              # Send the entire JSON response
              ERRORS=$(cat deploy-output.json | sed 's/"/\\\\"/g' | tr -d '\n')
              echo "deploy_errors=$ERRORS" >> $GITHUB_OUTPUT
            fi

        - name: Report validation results to Replit
          if: always()
          run: |
            if [ "${{ steps.deploy.outputs.deploy_success }}" == "true" ]; then
              echo "Reporting success to Replit..."
              curl -X POST https://9734b75b-fbc8-4b34-a2f2-0236da170064-00-3orv9mnjgg5yz.riker.replit.dev/webhook/github-callback \
                -H "Content-Type: application/json" \
                -d '{
                  "success": true,
                  "storyId": "${{ github.event.pull_request.head.ref }}",
                  "prNumber": "${{ github.event.pull_request.number }}"
                }'
            else
              echo "Reporting failure to Replit..."
              DEPLOY_ERROR="${{ steps.deploy.outputs.deploy_errors }}"
              
              # Check if scratch org creation failed
              if [ "${{ steps.create-org.outputs.org_created }}" != "true" ]; then
                DEPLOY_ERROR="Scratch org creation failed. DevHub authentication or org creation issue. Check DevHub is enabled and accessible."
              # Check if deployment step ran but failed  
              elif [ "${{ steps.deploy.outputs.deploy_success }}" == "false" ] && [ -f deploy-output.json ]; then
                # Send the actual JSON deployment errors
                DEPLOY_ERROR=$(cat deploy-output.json | sed 's/"/\\"/g')
              fi
              
              # Final fallback
              if [ -z "$DEPLOY_ERROR" ]; then
                DEPLOY_ERROR="Validation failed - check GitHub Actions logs for details"
              fi
              
              # Write JSON to temp file to avoid escaping issues
              cat > payload.json << EOF
{
  "success": false,
  "storyId": "${{ github.event.pull_request.head.ref }}",
  "prNumber": "${{ github.event.pull_request.number }}",
  "errors": $(echo "$DEPLOY_ERROR" | jq -Rs .)
}
EOF
              
              curl -X POST https://9734b75b-fbc8-4b34-a2f2-0236da170064-00-3orv9mnjgg5yz.riker.replit.dev/webhook/github-callback \
                -H "Content-Type: application/json" \
                -d @payload.json
            fi

        - name: Run Tests
          if: steps.deploy.outputs.deploy_success == 'true'
          continue-on-error: true
          run: |
            sf apex test run -o scratch-org -w 10 -r human

        - name: Delete Scratch Org
          if: steps.create-org.outputs.org_created == 'true'
          run: |
            sf org delete scratch -o scratch-org -p || true

        - name: Comment on PR
          if: always()
          uses: actions/github-script@v6
          with:
           script: |
            let body = '⚠️ Validation status unknown';
            const deployErrors = '${{ steps.deploy.outputs.deploy_errors }}';

              if ('${{ steps.create-org.outputs.org_created }}' !== 'true') {
                body = '⚠️ Scratch org creation failed or skipped';
              } else if ('${{ steps.deploy.outputs.deploy_success }}' === 'true') {
                body = '✅ Scratch org validation passed!';
              } else if ('${{ steps.deploy.outputs.deploy_success }}' === 'false') {
                body = '❌ Deployment to scratch org failed\n\n';
                if (deployErrors) {
                  body += '**Errors:**\n```\n' + deployErrors.substring(0, 500) + '\n```';
                } else {
                  body += 'Check the Actions tab for detailed error logs.';
                }
              } else {
                body = '⚠️ Deployment skipped or had issues';
              }

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
